import bcrypt from "bcrypt";
import prisma from "./prisma.js";

const seed = async () => {
  try {
    const email = "2001223947@huit.edu.vn";
    const maSV = email.split("@")[0];
    const plainPassword = process.env.SEED_PASSWORD || "1234";
    const hashed = await bcrypt.hash(plainPassword, 10);

    const user = await prisma.nguoiDung.upsert({
      where: { email },
      update: {},
      create: {
        email,
        matKhau: hashed,
        hoTen: "H·ªì ƒê·ª©c Ho√†ng Qu√¢n",
        vaiTro: "SINHVIEN",
        maSV,
        isActive: true,
        gioiTinh: "Nam",
        maLop: "13DHTH02",
        maKhoa: "CNTT",
        soDT: "0931318657",
        ngaySinh: new Date("2004-04-15"),
        avatarUrl: "/images/profile.png",
      },
    });

    const categoriesData = [
      { ma: "DIA_CHI_DO", ten: "ƒê·ªãa ch·ªâ ƒë·ªè", moTa: "Ho·∫°t ƒë·ªông b·∫Øt bu·ªôc", nhomDiem: "NHOM_1" },
      { ma: "HIEN_MAU", ten: "Hi·∫øn m√°u", moTa: "C·ª©u ng∆∞·ªùi, c·ª©u ƒë·ªùi", nhomDiem: "NHOM_2_3" },
      { ma: "MUA_HE_XANH", ten: "M√πa h√® xanh", moTa: "B·∫£o v·ªá m√¥i tr∆∞·ªùng", nhomDiem: "NHOM_2_3" },
      { ma: "XUAN_TINH_NGUYEN", ten: "Xu√¢n t√¨nh nguy·ªán", moTa: "Ho·∫°t ƒë·ªông m√πa xu√¢n", nhomDiem: "NHOM_2_3" },
      { ma: "HO_TRO", ten: "H·ªó tr·ª£", moTa: "H·ªó tr·ª£ c·ªông ƒë·ªìng", nhomDiem: "NHOM_2_3" }
    ];

    const categoryMap = {};
    for (const category of categoriesData) {
      const created = await prisma.danhMucHoatDong.upsert({
        where: { ma: category.ma },
        update: {
          ten: category.ten,
          moTa: category.moTa,
          nhomDiem: category.nhomDiem,
          isActive: true
        },
        create: {
          ...category,
          isActive: true
        }
      });
      categoryMap[category.ma] = created;
    }

    const activitiesData = [
      {
        maHoatDong: "HIENMAU291025",
        tieuDe: "TUY·ªÇN T√åNH NGUY·ªÜN VI√äN ƒêƒÇNG K√ù HI·∫æN M√ÅU T√åNH NGUY·ªÜN ‚ù§ü©∏",
        moTa: "ü©∏Mu·ªën c·ª©u v·ªõt th·∫ø gi·ªõi th√¨ kh√¥ng c·∫ßn ph·∫£i l√† si√™u anh h√πng ƒë·ªôi m≈© b·∫£o hi·ªÉm xanh ƒë√¢u, b·∫°n c√≥ th·ªÉ l√† m·ªôt nh√† anh h√πng trong m·∫Øt nh·ªØng ng∆∞·ªùi c·∫ßn gi√∫p ƒë·ª° b·∫±ng c√°ch tr·ªü th√†nh m·ªôt t√¨nh nguy·ªán vi√™n hi·∫øn m√°u! ƒê√¢y kh√¥ng ch·ªâ l√† m·ªôt h√†nh ƒë·ªông nh√¢n √°i, m√† c√≤n l√† c∆° h·ªôi ƒë·ªÉ b·∫°n th·ªÉ hi·ªán t√¨nh y√™u th∆∞∆°ng v√† s·∫ª chia v·ªõi c·ªông ƒë·ªìng.",
        diemCong: 25,
        batDauLuc: new Date("2025-10-29T21:00:00+07:00"),
        ketThucLuc: new Date("2025-10-29T21:15:00+07:00"),
        diaDiem: "Nh√† h√†ng ti·ªác c∆∞·ªõi ƒê·ªìng Xanh, 1320 L√™ ƒê·ª©c Th·ªç, ph∆∞·ªùng 13, qu·∫≠n G√≤ V·∫•p",
        sucChuaToiDa: 120,
        hinhAnh: "/images/activity-cover.png",
        categoryCode: "HIEN_MAU",
        isFeatured: false
      }
    ];

    const activityMap = {};
    for (const activity of activitiesData) {
      const category = activity.categoryCode ? categoryMap[activity.categoryCode] : null;
      const payload = {
        tieuDe: activity.tieuDe,
        moTa: activity.moTa,
        diemCong: activity.diemCong,
        batDauLuc: activity.batDauLuc,
        ketThucLuc: activity.ketThucLuc,
        diaDiem: activity.diaDiem,
        sucChuaToiDa: activity.sucChuaToiDa,
        hinhAnh: activity.hinhAnh,
        isFeatured: activity.isFeatured,
        isPublished: true,
        danhMucId: category?.id ?? null,
        nhomDiem: category?.nhomDiem
      };

      const created = await prisma.hoatDong.upsert({
        where: { maHoatDong: activity.maHoatDong },
        update: payload,
        create: {
          maHoatDong: activity.maHoatDong,
          ...payload
        }
      });
      activityMap[activity.maHoatDong] = created;
    }

    const registrationsData = [];

    const now = new Date();
    for (const registration of registrationsData) {
      const activity = activityMap[registration.maHoatDong];
      if (!activity) continue;
      await prisma.dangKyHoatDong.upsert({
        where: {
          nguoiDungId_hoatDongId: {
            nguoiDungId: user.id,
            hoatDongId: activity.id
          }
        },
        update: {
          trangThai: registration.trangThai,
          dangKyLuc: registration.dangKyLuc ?? now,
          diemDanhLuc: registration.diemDanhLuc ?? now,
          diemDanhBoiId: user.id,
          lyDoHuy: null,
          ghiChu: null,
          diemDanhGhiChu: null
        },
        create: {
          nguoiDungId: user.id,
          hoatDongId: activity.id,
          trangThai: registration.trangThai,
          dangKyLuc: registration.dangKyLuc ?? now,
          diemDanhLuc: registration.diemDanhLuc ?? now,
          diemDanhBoiId: user.id
        }
      });
    }

    console.log("T·∫°o seed th√†nh c√¥ng");
    process.exit(0);
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
};

seed();
